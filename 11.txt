int main(int argc, char* argv[]) {
   double  integral;   /* Store result in integral   */
   int my_rank, comm_sz, n = 1024, local_n;
   double a = 0.0, b = 3.0, h, local_a, local_b;
   double local_int, total_int;
   int source;

   printf("Enter a, b, and n\n");
   scanf("%lf", &a);
   scanf("%lf", &b);
   scanf("%d", &n);

   //
   MPI_Init(NULL, NULL);
   MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
   MPI_Comm_size(MPI_COMM_WORLD, &comm_sz);


   h = (b-a)/n;
   local_n = n / comm_sz;  // 每个processor需要处理的梯形的数目

						   /* Length of each process' interval of
						   * integration = local_n*h.  So my interval
						   * starts at: */
   local_a = a + my_rank*local_n*h;
   local_b = local_a + local_n*h;

   local_int = Trap(local_a, local_b, local_n, h);
  
   if (my_rank != 0) {
	   printf("id1\n");
	   MPI_Send(&local_int, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);
   }
   else {
	   total_int = local_int;
	   printf("id0\n");
	   for (source = 1; source < comm_sz; source++) {
		  
		   MPI_Recv(&local_int, 1, MPI_DOUBLE, source, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		   total_int += local_int;
		   printf("%f", local_int);
	   }
   }